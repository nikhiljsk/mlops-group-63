#!/bin/bash

# End-to-End System Testing Script
# Tests complete MLOps pipeline functionality

set -e

# Conda environment configuration
CONDA_ENV_NAME="jsk-ml"

# Activate conda environment
activate_conda_env() {
    echo "üîß Activating conda environment: $CONDA_ENV_NAME"
    
    # Initialize conda for bash
    if [ -f "$HOME/miniconda3/etc/profile.d/conda.sh" ]; then
        source "$HOME/miniconda3/etc/profile.d/conda.sh"
    elif [ -f "$HOME/anaconda3/etc/profile.d/conda.sh" ]; then
        source "$HOME/anaconda3/etc/profile.d/conda.sh"
    elif [ -f "/opt/conda/etc/profile.d/conda.sh" ]; then
        source "/opt/conda/etc/profile.d/conda.sh"
    else
        # Try to find conda in common locations
        for conda_path in "$HOME/miniconda3/bin/conda" "$HOME/anaconda3/bin/conda" "/opt/conda/bin/conda"; do
            if [ -f "$conda_path" ]; then
                eval "$($conda_path shell.bash hook)"
                break
            fi
        done
    fi
    
    # Check if conda is available
    if ! command -v conda &> /dev/null; then
        print_error "Conda not found. Please ensure conda is installed and in PATH."
        exit 1
    fi
    
    # Activate the environment
    conda activate "$CONDA_ENV_NAME" || {
        echo "‚ùå Failed to activate conda environment: $CONDA_ENV_NAME"
        echo "Available environments:"
        conda env list
        exit 1
    }
    
    echo "‚úÖ Successfully activated conda environment: $CONDA_DEFAULT_ENV"
}

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() { echo -e "${GREEN}‚úÖ $1${NC}"; }
print_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
print_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
print_error() { echo -e "${RED}‚ùå $1${NC}"; }

FAILED_TESTS=0
TOTAL_TESTS=0

run_test() {
    local test_name="$1"
    local test_command="$2"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    print_info "Running: $test_name"
    
    if eval "$test_command" > /dev/null 2>&1; then
        print_status "$test_name - PASSED"
    else
        print_error "$test_name - FAILED"
        FAILED_TESTS=$((FAILED_TESTS + 1))
    fi
}

# Ensure we're in the correct conda environment
if [ -z "$CONDA_DEFAULT_ENV" ] || [ "$CONDA_DEFAULT_ENV" != "$CONDA_ENV_NAME" ]; then
    activate_conda_env
fi

echo -e "${BLUE}üß™ End-to-End System Testing${NC}"
echo "============================="
echo "Environment: $CONDA_DEFAULT_ENV"
echo "Python: $(which python)"
echo ""

# Test 1: Code Quality
print_info "Phase 1: Code Quality Tests"
run_test "Linting Check" "flake8 api/ src/ --count --select=E9,F63,F7,F82 --show-source --statistics"
run_test "Import Sorting" "isort --check-only api/ src/"
run_test "Code Formatting" "black --check api/ src/"
echo ""

# Test 2: Unit Tests
print_info "Phase 2: Unit Tests"
run_test "Unit Test Suite" "python -m pytest tests/ -v -x --tb=short"
run_test "Test Coverage" "python -m pytest tests/ --cov=api --cov=src --cov-report=term-missing --cov-fail-under=70"
echo ""

# Test 3: Docker Build
print_info "Phase 3: Docker Build Tests"
run_test "Docker Build" "docker build -t iris-api-test ."
run_test "Docker Image Scan" "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image iris-api-test || true"
echo ""

# Test 4: Container Tests
print_info "Phase 4: Container Functionality Tests"

# Start container for testing
print_info "Starting test container..."
docker run -d --name iris-api-e2e-test -p 8001:8000 iris-api-test
sleep 30

run_test "Container Health Check" "curl -f http://localhost:8001/health"
run_test "API Documentation" "curl -f http://localhost:8001/docs"
run_test "Prediction Endpoint" "curl -f -X POST 'http://localhost:8001/predict' -H 'Content-Type: application/json' -d '{\"sepal_length\": 5.1, \"sepal_width\": 3.5, \"petal_length\": 1.4, \"petal_width\": 0.2}'"
run_test "Batch Prediction" "curl -f -X POST 'http://localhost:8001/predict/batch' -H 'Content-Type: application/json' -d '{\"samples\": [{\"sepal_length\": 5.1, \"sepal_width\": 3.5, \"petal_length\": 1.4, \"petal_width\": 0.2}]}'"
run_test "Model Info Endpoint" "curl -f http://localhost:8001/model/info"
run_test "Metrics Endpoint" "curl -f http://localhost:8001/metrics"
run_test "Retraining Status" "curl -f http://localhost:8001/retrain/status"

# Cleanup
print_info "Cleaning up test container..."
docker stop iris-api-e2e-test
docker rm iris-api-e2e-test
echo ""

# Test 5: Docker Compose
print_info "Phase 5: Docker Compose Tests"
print_info "Starting Docker Compose stack..."
docker-compose up -d
sleep 45

run_test "Compose Health Check" "curl -f http://localhost:8000/health"
run_test "MLflow Service" "curl -f http://localhost:5001/health || curl -f http://localhost:5001/ || true"

print_info "Stopping Docker Compose stack..."
docker-compose down
echo ""

# Test 6: Deployment Scripts
print_info "Phase 6: Deployment Script Tests"
run_test "Deploy Script Syntax" "bash -n deploy.sh"
run_test "Demo Script Syntax" "bash -n demo.sh"
run_test "Test Script Syntax" "bash -n scripts/test-local.sh"
run_test "Rollback Script Syntax" "bash -n scripts/rollback.sh"
echo ""

# Test 7: Configuration Validation
print_info "Phase 7: Configuration Validation"
run_test "Docker Compose Validation" "docker-compose config"
run_test "Kubernetes Manifests" "kubectl apply --dry-run=client -f deploy/kubernetes/ || echo 'kubectl not available, skipping'"
run_test "Prometheus Config" "promtool check config monitoring/prometheus.yml || echo 'promtool not available, skipping'"
echo ""

# Summary
echo ""
echo -e "${BLUE}üìä Test Results Summary${NC}"
echo "======================="
echo "Total Tests: $TOTAL_TESTS"
echo "Passed: $((TOTAL_TESTS - FAILED_TESTS))"
echo "Failed: $FAILED_TESTS"
echo ""

if [ $FAILED_TESTS -eq 0 ]; then
    print_status "üéâ All tests passed! System is ready for production."
    echo ""
    echo "‚úÖ Code quality checks passed"
    echo "‚úÖ Unit tests passed with coverage"
    echo "‚úÖ Docker build successful"
    echo "‚úÖ Container functionality verified"
    echo "‚úÖ Docker Compose stack working"
    echo "‚úÖ Deployment scripts validated"
    echo "‚úÖ Configuration files valid"
    echo ""
    echo "üöÄ Ready to deploy!"
    exit 0
else
    print_error "‚ùå $FAILED_TESTS test(s) failed. Please fix issues before deployment."
    exit 1
fi
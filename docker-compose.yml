version: '3.8'

services:
  # Main API service
  iris-api:
    build:
      context: .
      dockerfile: Dockerfile # This points to our new, simpler Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - MLFLOW_TRACKING_URI=http://mlflow:5001
      - DATABASE_URL=sqlite:///logs/logs.db # Point to the mounted logs directory
    # âœ¨ THIS IS THE KEY FIX: Mount local code directly into the container
    volumes:
      - ./api:/app/api
      - ./src:/app/src
      - ./artifacts:/app/artifacts
      - ./data:/app/data
      - ./logs:/app/logs
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      mlflow:
        condition: service_healthy
    networks:
      - iris-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database for MLflow
  postgres-db:
    image: postgres:13-alpine
    environment:
      - POSTGRES_USER=mlflow
      - POSTGRES_PASSWORD=mlflow
      - POSTGRES_DB=mlflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - iris-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MLflow tracking server
  mlflow:
    build: ./mlflow
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://mlflow:mlflow@postgres-db/mlflow
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlruns
    ports:
      - "5001:5001"
    volumes:
      - mlflow_artifacts:/mlruns
    networks:
      - iris-network
    restart: unless-stopped
    depends_on:
      postgres-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 20s

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - iris-network
    restart: unless-stopped
    
  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - iris-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  postgres_data: {}
  mlflow_artifacts: {}
  prometheus_data: {}
  grafana_data: {}

networks:
  iris-network:
    driver: bridge

version: '3.8'

services:
  # Main API service
  iris-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8000:8000"
    environment:
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - DATABASE_URL=sqlite:///./logs.db
      - USE_MLFLOW_REGISTRY=true
      - MLFLOW_MODEL_NAME=iris-classifier
    volumes:
      # Mount source code for development (hot reload)
      - ./api:/app/api
      - ./src:/app/src
      # Persistent volumes for data
      - ./artifacts:/app/artifacts
      - ./data:/app/data
      - ./logs:/app/logs
      - mlflow_data:/app/mlruns
    depends_on:
      - mlflow
    networks:
      - iris-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MLflow tracking server
  mlflow:
    image: python:3.11-slim
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=sqlite:///mlflow/mlflow.db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - mlflow_data:/mlflow
    networks:
      - iris-network
    command: >
      bash -c "
        pip install mlflow[extras] &&
        mkdir -p /mlflow/artifacts &&
        mlflow server 
          --backend-store-uri sqlite:///mlflow/mlflow.db 
          --default-artifact-root /mlflow/artifacts 
          --host 0.0.0.0 
          --port 5000
      "
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - iris-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - iris-network
    restart: unless-stopped
    profiles:
      - monitoring
    depends_on:
      - prometheus

volumes:
  mlflow_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  iris-network:
    driver: bridge